networks:
  db: {external: true}
  world: null
services:
  micro_elmodifferencepredict:
    build: python
    container_name: micro_elmodifferencepredict
    entrypoint: python3 -c 'from language.transformer.ElmoDifferencePredict import
      ElmoDifferencePredict; from wsgiref import simple_server; simple_server.make_server("0.0.0.0",
      7777, ElmoDifferencePredict.application).serve_forever()'
    environment: {GDB_HOST: gdb, GDB_PASSWORD: '${GDB_PASSWORD}', INSIDE: 'true',
      LANG: en_US.UTF - 8, LANGUAGE: en_US.UTF-8, LC_ALL: en_US.UTF-8}
    image: full_python
    logging:
      driver: json-file
      options: {max-file: '5', max-size: 10m}
    networks: [db]
    restart: unless-stopped
    volumes: [$CWD/python:/home/finn/Programming/self-reading-library/python]
  micro_layout2readingorder:
    build: python
    container_name: micro_layout2readingorder
    entrypoint: python3 -c 'from layout.Layout2ReadingOrder import Layout2ReadingOrder;
      from wsgiref import simple_server; simple_server.make_server("0.0.0.0", 7777,
      Layout2ReadingOrder.application).serve_forever()'
    environment: {GDB_HOST: gdb, GDB_PASSWORD: '${GDB_PASSWORD}', INSIDE: 'true',
      LANG: en_US.UTF - 8, LANGUAGE: en_US.UTF-8, LC_ALL: en_US.UTF-8}
    image: full_python
    logging:
      driver: json-file
      options: {max-file: '5', max-size: 10m}
    networks: [db]
    restart: unless-stopped
    volumes: [$CWD/python:/home/finn/Programming/self-reading-library/python]
  micro_topicmaker:
    build: python
    container_name: micro_topicmaker
    entrypoint: python3 -c 'from topics.TopicMaker import TopicMaker; from wsgiref
      import simple_server; simple_server.make_server("0.0.0.0", 7777, TopicMaker.application).serve_forever()'
    environment: {GDB_HOST: gdb, GDB_PASSWORD: '${GDB_PASSWORD}', INSIDE: 'true',
      LANG: en_US.UTF - 8, LANGUAGE: en_US.UTF-8, LC_ALL: en_US.UTF-8}
    image: full_python
    logging:
      driver: json-file
      options: {max-file: '5', max-size: 10m}
    networks: [db]
    restart: unless-stopped
    volumes: [$CWD/python:/home/finn/Programming/self-reading-library/python]
  micro_txt2mp3:
    build: python
    container_name: micro_txt2mp3
    entrypoint: python3 -c 'from language.text2speech.Txt2Mp3 import Txt2Mp3; from
      wsgiref import simple_server; simple_server.make_server("0.0.0.0", 7777, Txt2Mp3.application).serve_forever()'
    environment: {GDB_HOST: gdb, GDB_PASSWORD: '${GDB_PASSWORD}', INSIDE: 'true',
      LANG: en_US.UTF - 8, LANGUAGE: en_US.UTF-8, LC_ALL: en_US.UTF-8}
    image: full_python
    logging:
      driver: json-file
      options: {max-file: '5', max-size: 10m}
    networks: [db]
    restart: unless-stopped
    volumes: [$CWD/python:/home/finn/Programming/self-reading-library/python, $CWD/.layouteagle/audio/:/home/finn/Programming/self-reading-library/python/.layouteagle/audio/language/text2speech/]
  micro_type:
    container_name: micro_type
    entrypoint: python3 -c 'from builtins import type; from wsgiref import simple_server;
      simple_server.make_server("0.0.0.0", 7777, type.application).serve_forever()'
    environment: {GDB_HOST: gdb, GDB_PASSWORD: '${GDB_PASSWORD}', INSIDE: 'true',
      LANG: en_US.UTF - 8, LANGUAGE: en_US.UTF-8, LC_ALL: en_US.UTF-8}
    image: full_python
    logging:
      driver: json-file
      options: {max-file: '5', max-size: 10m}
    networks: [db]
    restart: unless-stopped
    volumes: [$CWD/python:/home/finn/Programming/self-reading-library/python]
  micro_universalmodel:
    build:
      args: {CONTEXT: language/multipurpose_language_models/UniversalModel, OUTSIDE_CONTEXT: /language/multipurpose_language_models}
      context: python
      dockerfile: $CWD/python/language/multipurpose_language_models/Dockerfile
    container_name: micro_universalmodel
    entrypoint: python3 -c 'from language.multipurpose_language_models.UniversalModel
      import UniversalModel; from wsgiref import simple_server; simple_server.make_server("0.0.0.0",
      7777, UniversalModel.application).serve_forever()'
    environment: {GDB_HOST: gdb, GDB_PASSWORD: '${GDB_PASSWORD}', INSIDE: 'true',
      LANG: en_US.UTF - 8, LANGUAGE: en_US.UTF-8, LC_ALL: en_US.UTF-8}
    image: full_python
    logging:
      driver: json-file
      options: {max-file: '5', max-size: 10m}
    networks: [db]
    restart: unless-stopped
    volumes: [$CWD/python:/home/finn/Programming/self-reading-library/python, $CWD/python/language/multipurpose_language_models/../../../ggml-alpaca-7b-q4.bin:/volumes/ggml-alpaca-7b-q4.bin]
  trigger_elmodifferencetrain:
    build: python
    container_name: trigger_elmodifferencetrain
    entrypoint: python3 -c 'from language.transformer.ElmoDifferenceTrain import ElmoDifferenceTrain;  ElmoDifferenceTrain.wait_for_change()'
    environment: {GDB_HOST: gdb, GDB_PASSWORD: '${GDB_PASSWORD}', INSIDE: 'true',
      LANG: en_US.UTF - 8, LANGUAGE: en_US.UTF-8, LC_ALL: en_US.UTF-8}
    image: full_python
    logging:
      driver: json-file
      options: {max-file: '5', max-size: 10m}
    networks: [db]
    restart: unless-stopped
    volumes: [$CWD/python:/home/finn/Programming/self-reading-library/python]
  trigger_training:
    build: python
    container_name: trigger_training
    entrypoint: python3 -c 'from layout.training.training import Training;  Training.wait_for_change()'
    environment: {GDB_HOST: gdb, GDB_PASSWORD: '${GDB_PASSWORD}', INSIDE: 'true',
      LANG: en_US.UTF - 8, LANGUAGE: en_US.UTF-8, LC_ALL: en_US.UTF-8}
    image: full_python
    logging:
      driver: json-file
      options: {max-file: '5', max-size: 10m}
    networks: [db]
    restart: unless-stopped
    volumes: [$CWD/python:/home/finn/Programming/self-reading-library/python]
